import{_ as e,c as t,o as a,V as r}from"./chunks/framework.fZt_wkQb.js";const u=JSON.parse('{"title":"Types","description":"","frontmatter":{},"headers":[],"relativePath":"get-started/types.md","filePath":"get-started/types.md"}'),o={name:"get-started/types.md"},i=r('<h1 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">â€‹</a></h1><nav class="table-of-contents"><ul></ul></nav><ul><li>Primitive Types <ul><li><a href="/language-reference/types/integer-numeric-types.html">Signed Integer</a>: <code>byte, short, int, long</code></li><li><a href="/language-reference/types/integer-numeric-types.html">Unsigned Integer</a>: <code>ubyte, ushort, uint, ulong</code></li><li><a href="/language-reference/types/real-numeric-types.html">Fixed Point</a>: <code>norm</code></li><li><a href="/language-reference/types/real-numeric-types.html">Floating Point</a>: <code>half, float, double</code></li><li><a href="/language-reference/types/bool.html">Boolean</a>: <code>bool</code>, which represents <code>true</code> or <code>false</code></li><li><a href="/language-reference/types/char.html">Unicode Characters</a>: <code>char</code>, which represents a UTF-16 code unit</li><li><a href="/language-reference/types/string.html">Unicode Strings</a>: <code>string</code></li></ul></li><li><a href="/">Tuple Types</a>: User-defined types of the form <code>(T1, T2, ...)</code></li><li><a href="/">Enum Types</a>: User-defined types of the form <code>enum E {...}</code>. An enum type is a distinct type with predefined constants.</li><li><a href="/">Struct Types</a>: User-defined types of the form <code>struct S {...}</code></li><li><a href="/">Interface Types</a>: User-defined types of the form <code>interface I {...}</code></li><li>Array Types <ul><li><a href="/">Fixed Array</a>: <code>TYPE[SIZE]</code></li><li><a href="/">Dynamic Array</a>: <code>TYPE[]</code></li></ul></li><li><a href="/">Delegate Types</a>: User-defined types of the form <code>delegate TYPE D(...)</code></li><li><a href="/">Pointer Types</a>: <code>T*</code></li></ul>',3),l=[i];function n(s,c,d,f,p,h){return a(),t("div",null,l)}const g=e(o,[["render",n]]);export{u as __pageData,g as default};
