import{_ as n,c as t,a,V as l,m as s,o as m}from"./chunks/framework.fZt_wkQb.js";const E=JSON.parse('{"title":"Integer Numeric Types","description":"","frontmatter":{"head":[["link",{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"}]]},"headers":[],"relativePath":"language-reference/types/integer-numeric-types.md","filePath":"language-reference/types/integer-numeric-types.md"}'),e={name:"language-reference/types/integer-numeric-types.md"},r=l('<h1 id="integer-numeric-types" tabindex="-1">Integer Numeric Types <a class="header-anchor" href="#integer-numeric-types" aria-label="Permalink to &quot;Integer Numeric Types&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#characteristics-of-integer-types">Characteristics of Integer Types</a><ul><li><a href="#signed-integers">Signed Integers</a></li><li><a href="#unsigned-integers">Unsigned Integers</a></li></ul></li><li><a href="#integer-literals">Integer Literals</a></li><li><a href="#conversions">Conversions</a></li></ul></nav><br>',3),i=s("h2",{id:"characteristics-of-integer-types",tabindex:"-1"},[a("Characteristics of Integer Types "),s("a",{class:"header-anchor",href:"#characteristics-of-integer-types","aria-label":'Permalink to "Characteristics of Integer Types"'},"​")],-1),o=s("h3",{id:"signed-integers",tabindex:"-1"},[a("Signed Integers "),s("a",{class:"header-anchor",href:"#signed-integers","aria-label":'Permalink to "Signed Integers"'},"​")],-1),c=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Keyword"),s("th",null,"Range"),s("th",null,"Bit Size")])]),s("tbody",null,[s("tr",null,[s("td",null,"byte"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mo",null,"["),s("mo",null,"−"),s("mn",null,"1"),s("mn",null,"2"),s("mn",null,"8"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mn",null,"2"),s("mn",null,"7"),s("mo",null,"]")]),s("annotation",{encoding:"application/x-tex"},"[-128, 127]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mopen"},"["),s("span",{class:"mord"},"−"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mpunct"},","),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mclose"},"]")])])])]),s("td",null,"8")]),s("tr",null,[s("td",null,"short"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mo",null,"["),s("mo",null,"−"),s("mn",null,"3"),s("mn",null,"2"),s("mn",null,"7"),s("mn",null,"6"),s("mn",null,"8"),s("mo",{separator:"true"},","),s("mn",null,"3"),s("mn",null,"2"),s("mn",null,"7"),s("mn",null,"6"),s("mn",null,"7"),s("mo",null,"]")]),s("annotation",{encoding:"application/x-tex"},"[-32768, 32767]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mopen"},"["),s("span",{class:"mord"},"−"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mpunct"},","),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mclose"},"]")])])])]),s("td",null,"16")]),s("tr",null,[s("td",null,"int"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mo",null,"["),s("mo",null,"−"),s("mn",null,"2"),s("mn",null,"1"),s("mn",null,"4"),s("mn",null,"7"),s("mn",null,"4"),s("mn",null,"8"),s("mn",null,"3"),s("mn",null,"6"),s("mn",null,"4"),s("mn",null,"8"),s("mo",{separator:"true"},","),s("mn",null,"2"),s("mn",null,"1"),s("mn",null,"4"),s("mn",null,"7"),s("mn",null,"4"),s("mn",null,"8"),s("mn",null,"3"),s("mn",null,"6"),s("mn",null,"4"),s("mn",null,"7"),s("mo",null,"]")]),s("annotation",{encoding:"application/x-tex"},"[-2147483648, 2147483647]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mopen"},"["),s("span",{class:"mord"},"−"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mpunct"},","),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mclose"},"]")])])])]),s("td",null,"32")]),s("tr",null,[s("td",null,"long"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mo",null,"["),s("mo",null,"−"),s("mn",null,"9"),s("mn",null,"2"),s("mn",null,"2"),s("mn",null,"3"),s("mn",null,"3"),s("mn",null,"7"),s("mn",null,"2"),s("mn",null,"0"),s("mn",null,"3"),s("mn",null,"6"),s("mn",null,"8"),s("mn",null,"5"),s("mn",null,"4"),s("mn",null,"7"),s("mn",null,"7"),s("mn",null,"5"),s("mn",null,"8"),s("mn",null,"0"),s("mn",null,"8"),s("mo",{separator:"true"},","),s("mn",null,"9"),s("mn",null,"2"),s("mn",null,"2"),s("mn",null,"3"),s("mn",null,"3"),s("mn",null,"7"),s("mn",null,"2"),s("mn",null,"0"),s("mn",null,"3"),s("mn",null,"6"),s("mn",null,"8"),s("mn",null,"5"),s("mn",null,"4"),s("mn",null,"7"),s("mn",null,"7"),s("mn",null,"5"),s("mn",null,"8"),s("mn",null,"0"),s("mn",null,"7"),s("mo",null,"]")]),s("annotation",{encoding:"application/x-tex"},"[-9223372036854775808, 9223372036854775807]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mopen"},"["),s("span",{class:"mord"},"−"),s("span",{class:"mord mathrm"},"9"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mpunct"},","),s("span",{class:"mord mathrm"},"9"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mclose"},"]")])])])]),s("td",null,"64")])])],-1),h=s("h3",{id:"unsigned-integers",tabindex:"-1"},[a("Unsigned Integers "),s("a",{class:"header-anchor",href:"#unsigned-integers","aria-label":'Permalink to "Unsigned Integers"'},"​")],-1),p=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Keyword"),s("th",null,"Max Value"),s("th",null,"Bit Size")])]),s("tbody",null,[s("tr",null,[s("td",null,"ubyte"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mn",null,"5"),s("mn",null,"5")]),s("annotation",{encoding:"application/x-tex"},"255")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.64444em"}}),s("span",{class:"strut bottom",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"5")])])])]),s("td",null,"8")]),s("tr",null,[s("td",null,"ushort"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mn",null,"6"),s("mn",null,"5"),s("mn",null,"5"),s("mn",null,"3"),s("mn",null,"5")]),s("annotation",{encoding:"application/x-tex"},"65535")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.64444em"}}),s("span",{class:"strut bottom",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"5")])])])]),s("td",null,"16")]),s("tr",null,[s("td",null,"uint"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mn",null,"4"),s("mn",null,"2"),s("mn",null,"9"),s("mn",null,"4"),s("mn",null,"9"),s("mn",null,"6"),s("mn",null,"7"),s("mn",null,"2"),s("mn",null,"9"),s("mn",null,"5")]),s("annotation",{encoding:"application/x-tex"},"4294967295")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.64444em"}}),s("span",{class:"strut bottom",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"9"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"9"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"9"),s("span",{class:"mord mathrm"},"5")])])])]),s("td",null,"32")]),s("tr",null,[s("td",null,"ulong"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mn",null,"8"),s("mn",null,"4"),s("mn",null,"4"),s("mn",null,"6"),s("mn",null,"7"),s("mn",null,"4"),s("mn",null,"4"),s("mn",null,"0"),s("mn",null,"7"),s("mn",null,"3"),s("mn",null,"7"),s("mn",null,"0"),s("mn",null,"9"),s("mn",null,"5"),s("mn",null,"5"),s("mn",null,"1"),s("mn",null,"6"),s("mn",null,"1"),s("mn",null,"5")]),s("annotation",{encoding:"application/x-tex"},"18446744073709551615")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.64444em"}}),s("span",{class:"strut bottom",style:{height:"0.64444em","vertical-align":"0em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"7"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mord mathrm"},"9"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"5")])])])]),s("td",null,"64")])])],-1),d=l(`<h2 id="integer-literals" tabindex="-1">Integer Literals <a class="header-anchor" href="#integer-literals" aria-label="Permalink to &quot;Integer Literals&quot;">​</a></h2><p>Integer literals can be</p><ul><li>Decimal: no prefix</li><li>Hexadecimal: prefixed with <code>0x</code></li><li>Octal: prefixed with <code>0o</code></li><li>Binary: prefixed with <code>0b</code></li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 69</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hexadecimal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> octal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0o105</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> binary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b_0100_0101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>The preceding example also shows the use of <code>_</code> as a digit separator. You can use the digit separator with all kinds of numeric literals.</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Literals are interpreted as positive values. For example, the literal <code>0xFF_FF_FF_FF</code> represents the number <code>4294967295</code> of the uint type, though it has the same bit representation as the number <code>-1</code> of the int type.</p></div><p>The type of an integer literal is determined by its suffix as follows:</p><table><thead><tr><th>Keyword</th><th>Suffix</th></tr></thead><tbody><tr><td>byte</td><td>Y</td></tr><tr><td>short</td><td>S</td></tr><tr><td>int</td><td>I</td></tr><tr><td>long</td><td>L</td></tr><tr><td>ubyte</td><td>UY</td></tr><tr><td>ushort</td><td>US</td></tr><tr><td>uint</td><td>UI</td></tr><tr><td>ulong</td><td>UL</td></tr></tbody></table><h2 id="conversions" tabindex="-1">Conversions <a class="header-anchor" href="#conversions" aria-label="Permalink to &quot;Conversions&quot;">​</a></h2><p>You can convert any integer numeric type to any other integer numeric type. If the destination type can store all values of the source type, the conversion is implicit. Otherwise, you need to use a cast expression to perform an explicit conversion.</p>`,10);function u(g,k,y,x,b,_){return m(),t("div",null,[r,a(" All integer numeric types support arithmetic, bitwise, comparison, and equality operators. "),i,o,c,h,p,d])}const v=n(e,[["render",u]]);export{E as __pageData,v as default};
