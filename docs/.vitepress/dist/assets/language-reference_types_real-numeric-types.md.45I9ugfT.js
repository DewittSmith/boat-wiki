import{_ as n,c as t,a,V as l,m as s,o as e}from"./chunks/framework.fZt_wkQb.js";const b=JSON.parse('{"title":"Real Numeric Types","description":"","frontmatter":{"head":[["link",{"rel":"stylesheet","href":"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"}]]},"headers":[],"relativePath":"language-reference/types/real-numeric-types.md","filePath":"language-reference/types/real-numeric-types.md"}'),i={name:"language-reference/types/real-numeric-types.md"},r=l('<h1 id="real-numeric-types" tabindex="-1">Real Numeric Types <a class="header-anchor" href="#real-numeric-types" aria-label="Permalink to &quot;Real Numeric Types&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#characteristics-of-real-types">Characteristics of Real Types</a><ul><li><a href="#fixed-point">Fixed Point</a></li><li><a href="#floating-point">Floating Point</a></li></ul></li><li><a href="#real-literals">Real Literals</a></li><li><a href="#conversions">Conversions</a></li></ul></nav><br>',3),m=s("h2",{id:"characteristics-of-real-types",tabindex:"-1"},[a("Characteristics of Real Types "),s("a",{class:"header-anchor",href:"#characteristics-of-real-types","aria-label":'Permalink to "Characteristics of Real Types"'},"​")],-1),p=s("h3",{id:"fixed-point",tabindex:"-1"},[a("Fixed Point "),s("a",{class:"header-anchor",href:"#fixed-point","aria-label":'Permalink to "Fixed Point"'},"​")],-1),o=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Keyword"),s("th",null,"Range"),s("th",null,"Bit Size")])]),s("tbody",null,[s("tr",null,[s("td",null,"norm"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mo",null,"["),s("mo",null,"−"),s("mn",null,"1"),s("mo",{separator:"true"},","),s("mn",null,"1"),s("mo",null,"]")]),s("annotation",{encoding:"application/x-tex"},"[-1, 1]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.75em"}}),s("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mopen"},"["),s("span",{class:"mord"},"−"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mpunct"},","),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mclose"},"]")])])])]),s("td",null,"8")])])],-1),c=s("h3",{id:"floating-point",tabindex:"-1"},[a("Floating Point "),s("a",{class:"header-anchor",href:"#floating-point","aria-label":'Permalink to "Floating Point"'},"​")],-1),h=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Keyword"),s("th",null,"Approximate Range"),s("th",null,"Bit Size")])]),s("tbody",null,[s("tr",null,[s("td",null,"half"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mo",null,"["),s("mo",null,"±"),s("mn",null,"5"),s("mi",{mathvariant:"normal"},"."),s("mn",null,"9"),s("mn",null,"6"),s("mo",null,"∗"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"8")])]),s("mo",{separator:"true"},","),s("mo",null,"±"),s("mn",null,"6"),s("mi",{mathvariant:"normal"},"."),s("mn",null,"5"),s("mn",null,"5"),s("mo",null,"∗"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mrow",null,[s("mn",null,"4")])]),s("mo",null,"]")]),s("annotation",{encoding:"application/x-tex"},"[\\pm5.96 * 10^{-8}, \\pm6.55 * 10^{4}]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mopen"},"["),s("span",{class:"mord"},"±"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"9"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mbin"},"∗"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"0"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord scriptstyle uncramped"},[s("span",{class:"mord"},"−"),s("span",{class:"mord mathrm"},"8")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},"±"),s("span",{class:"mord mathrm"},"6"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mord mathrm"},"5"),s("span",{class:"mbin"},"∗"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"0"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"4")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mclose"},"]")])])])]),s("td",null,"16")]),s("tr",null,[s("td",null,"float"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mo",null,"["),s("mo",null,"±"),s("mn",null,"1"),s("mi",{mathvariant:"normal"},"."),s("mn",null,"4"),s("mn",null,"0"),s("mo",null,"∗"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"4"),s("mn",null,"5")])]),s("mo",{separator:"true"},","),s("mo",null,"±"),s("mn",null,"3"),s("mi",{mathvariant:"normal"},"."),s("mn",null,"4"),s("mn",null,"0"),s("mo",null,"∗"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mrow",null,[s("mn",null,"3"),s("mn",null,"8")])]),s("mo",null,"]")]),s("annotation",{encoding:"application/x-tex"},"[\\pm1.40 * 10^{-45}, \\pm3.40 * 10^{38}]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mopen"},"["),s("span",{class:"mord"},"±"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mbin"},"∗"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"0"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord scriptstyle uncramped"},[s("span",{class:"mord"},"−"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"5")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},"±"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mbin"},"∗"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"0"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"8")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mclose"},"]")])])])]),s("td",null,"32")]),s("tr",null,[s("td",null,"double"),s("td",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",null,[s("semantics",null,[s("mrow",null,[s("mo",null,"["),s("mo",null,"±"),s("mn",null,"4"),s("mi",{mathvariant:"normal"},"."),s("mn",null,"9"),s("mn",null,"4"),s("mo",null,"∗"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"3"),s("mn",null,"2"),s("mn",null,"4")])]),s("mo",{separator:"true"},","),s("mo",null,"±"),s("mn",null,"1"),s("mi",{mathvariant:"normal"},"."),s("mn",null,"8"),s("mn",null,"0"),s("mo",null,"∗"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mrow",null,[s("mn",null,"3"),s("mn",null,"0"),s("mn",null,"8")])]),s("mo",null,"]")]),s("annotation",{encoding:"application/x-tex"},"[\\pm4.94 * 10^{-324}, \\pm1.80 * 10^{308}]")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"strut",style:{height:"0.8141079999999999em"}}),s("span",{class:"strut bottom",style:{height:"1.064108em","vertical-align":"-0.25em"}}),s("span",{class:"base textstyle uncramped"},[s("span",{class:"mopen"},"["),s("span",{class:"mord"},"±"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"9"),s("span",{class:"mord mathrm"},"4"),s("span",{class:"mbin"},"∗"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"0"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord scriptstyle uncramped"},[s("span",{class:"mord"},"−"),s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"2"),s("span",{class:"mord mathrm"},"4")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mpunct"},","),s("span",{class:"mord"},"±"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord mathrm"},"."),s("span",{class:"mord mathrm"},"8"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mbin"},"∗"),s("span",{class:"mord mathrm"},"1"),s("span",{class:"mord"},[s("span",{class:"mord mathrm"},"0"),s("span",{class:"vlist"},[s("span",{style:{top:"-0.363em","margin-right":"0.05em"}},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),s("span",{class:"reset-textstyle scriptstyle uncramped"},[s("span",{class:"mord scriptstyle uncramped"},[s("span",{class:"mord mathrm"},"3"),s("span",{class:"mord mathrm"},"0"),s("span",{class:"mord mathrm"},"8")])])]),s("span",{class:"baseline-fix"},[s("span",{class:"fontsize-ensurer reset-size5 size5"},[s("span",{style:{"font-size":"0em"}},"​")]),a("​")])])]),s("span",{class:"mclose"},"]")])])])]),s("td",null,"64")])])],-1),d=l(`<h2 id="real-literals" tabindex="-1">Real Literals <a class="header-anchor" href="#real-literals" aria-label="Permalink to &quot;Real Literals&quot;">​</a></h2><p>The type of a real literal is determined by its suffix as follows:</p><table><thead><tr><th>Keyword</th><th>Suffix</th></tr></thead><tbody><tr><td>norm</td><td>N</td></tr><tr><td>half</td><td>H</td></tr><tr><td>float</td><td>F</td></tr><tr><td>double</td><td>D</td></tr></tbody></table><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _norm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 0.8N</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _half </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> 1.61H</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _float </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21.61F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3_000_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_double </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>The preceding example also shows the use of <code>_</code> as a digit separator. You can use the digit separator with all kinds of numeric literals.</p><p>You can also use scientific notation, that is, specify an exponent part of a real literal, as the following example shows:</p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12.35E11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 125.1e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 56.5e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="conversions" tabindex="-1">Conversions <a class="header-anchor" href="#conversions" aria-label="Permalink to &quot;Conversions&quot;">​</a></h2><p>You can convert any real numeric type to any other real numeric type. If the destination type can store all values of the source type, the conversion is implicit. Otherwise, you need to use a cast expression to perform an explicit conversion.</p>`,9);function u(k,y,g,f,x,E){return e(),t("div",null,[r,a(" All real numeric types support arithmetic, comparison, and equality operators. "),m,p,o,c,h,d])}const z=n(i,[["render",u]]);export{b as __pageData,z as default};
